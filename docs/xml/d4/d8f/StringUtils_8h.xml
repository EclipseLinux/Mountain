<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="d4/d8f/StringUtils_8h" kind="file" language="C++">
    <compoundname>StringUtils.h</compoundname>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includedby refid="df/d2b/SignalEmitter_8h" local="yes">include/core/SignalEmitter.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>include/utils/StringUtils.h</label>
        <link refid="d4/d8f/StringUtils_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>string</label>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>include/core/Element.h</label>
        <link refid="d5/d76/Element_8h_source"/>
      </node>
      <node id="2">
        <label>include/core/SignalEmitter.h</label>
        <link refid="df/d2b/SignalEmitter_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/utils/StringUtils.h</label>
        <link refid="d4/d8f/StringUtils_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="d4/d8f/StringUtils_8h_1a1079f4841f8957c577ef63ec0cde2a1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stringReplace</definition>
        <argsstring>(std::string str, const std::string &amp;src, const std::string &amp;dest)</argsstring>
        <name>stringReplace</name>
        <param>
          <type>std::string</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
<para>Replaces every occurrence of a string in a string (confusing, right?) why isn&apos;t this on the stdlib again? </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Original string to modify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>String to replace </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>String to replace it <emphasis>with</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/utils/StringUtils.h" line="13" column="6" declfile="include/utils/StringUtils.h" declline="13" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d4/d8f/StringUtils_8h_1a92140aeaa25dd56eb848dc1c2344a5b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto stringToUpper</definition>
        <argsstring>(std::string str) -&gt; std::string</argsstring>
        <name>stringToUpper</name>
        <param>
          <type>std::string</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Replaces every character in a string with it&apos;s uppercase counterpart. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to modify </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string Upppercase version of the string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/utils/StringUtils.h" line="21" column="6" declfile="include/utils/StringUtils.h" declline="21" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d4/d8f/StringUtils_8h_1a577b53b4fc09f96f5d25105c3757a5e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto stringToLower</definition>
        <argsstring>(std::string str) -&gt; std::string</argsstring>
        <name>stringToLower</name>
        <param>
          <type>std::string</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Replaces every character in a string with it&apos;s lowercase counterpart. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to modify </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string Lowercase version of the string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/utils/StringUtils.h" line="29" column="6" declfile="include/utils/StringUtils.h" declline="29" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d4/d8f/StringUtils_8h_1a08b9177e41aeae2ecaae491bf904a891" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto stringSplit</definition>
        <argsstring>(const std::string &amp;str, const std::string &amp;delimiter) -&gt; std::vector&lt; std::string &gt;</argsstring>
        <name>stringSplit</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>delimiter</declname>
        </param>
        <briefdescription>
<para>Splits a string via another string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to split </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delimiter</parametername>
</parameternamelist>
<parameterdescription>
<para>String to split from (delimiter) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;std::string&gt; Array of the splitted string results </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/utils/StringUtils.h" line="38" column="6" declfile="include/utils/StringUtils.h" declline="38" declcolumn="6"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stringReplace(std::string<sp/>str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>src,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>dest);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stringToUpper(std::string<sp/>str)<sp/>-&gt;<sp/>std::string;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stringToLower(std::string<sp/>str)<sp/>-&gt;<sp/>std::string;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stringSplit(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>delimiter)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/>std::vector&lt;std::string&gt;;</highlight></codeline>
    </programlisting>
    <location file="include/utils/StringUtils.h"/>
  </compounddef>
</doxygen>
